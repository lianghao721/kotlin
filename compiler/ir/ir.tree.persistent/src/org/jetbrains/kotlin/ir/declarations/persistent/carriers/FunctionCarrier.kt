/*
 * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.ir.declarations.persistent.carriers

import org.jetbrains.kotlin.descriptors.DescriptorVisibility
import org.jetbrains.kotlin.ir.declarations.IrDeclarationOrigin
import org.jetbrains.kotlin.ir.declarations.IrTypeParameter
import org.jetbrains.kotlin.ir.declarations.IrValueParameter
import org.jetbrains.kotlin.ir.expressions.IrBody
import org.jetbrains.kotlin.ir.expressions.IrConstructorCall
import org.jetbrains.kotlin.ir.symbols.IrPropertySymbol
import org.jetbrains.kotlin.ir.symbols.IrSimpleFunctionSymbol
import org.jetbrains.kotlin.ir.symbols.IrSymbol
import org.jetbrains.kotlin.ir.symbols.IrTypeParameterSymbol
import org.jetbrains.kotlin.ir.symbols.IrValueParameterSymbol
import org.jetbrains.kotlin.ir.types.IrType

// Auto-generated by compiler/ir/ir.tree/src/org/jetbrains/kotlin/ir/persistentIrGenerator/Main.kt. DO NOT EDIT!

internal interface FunctionCarrier : DeclarationCarrier{
    var returnTypeFieldField: IrType
    var dispatchReceiverParameterField: IrValueParameter?
    var dispatchReceiverParameterSymbolField: IrValueParameterSymbol?
    var extensionReceiverParameterField: IrValueParameter?
    var extensionReceiverParameterSymbolField: IrValueParameterSymbol?
    var bodyField: IrBody?
    var visibilityField: DescriptorVisibility
    var typeParametersField: List<IrTypeParameter>
    var typeParametersSymbolField: List<IrTypeParameterSymbol>
    var valueParametersField: List<IrValueParameter>
    var valueParametersSymbolField: List<IrValueParameterSymbol>
    var correspondingPropertySymbolField: IrPropertySymbol?
    var overriddenSymbolsField: List<IrSimpleFunctionSymbol>

    override fun clone(): FunctionCarrier {
        return FunctionCarrierImpl(
            lastModified,
            parentSymbolField,
            originField,
            annotationsField,
            returnTypeFieldField,
            dispatchReceiverParameterSymbolField,
            extensionReceiverParameterSymbolField,
            bodyField,
            visibilityField,
            typeParametersSymbolField,
            valueParametersSymbolField,
            correspondingPropertySymbolField,
            overriddenSymbolsField
        )
    }
}

internal class FunctionCarrierImpl(
    override val lastModified: Int,
    override var parentSymbolField: IrSymbol?,
    override var originField: IrDeclarationOrigin,
    override var annotationsField: List<IrConstructorCall>,
    override var returnTypeFieldField: IrType,
    override var dispatchReceiverParameterSymbolField: IrValueParameterSymbol?,
    override var extensionReceiverParameterSymbolField: IrValueParameterSymbol?,
    override var bodyField: IrBody?,
    override var visibilityField: DescriptorVisibility,
    override var typeParametersSymbolField: List<IrTypeParameterSymbol>,
    override var valueParametersSymbolField: List<IrValueParameterSymbol>,
    override var correspondingPropertySymbolField: IrPropertySymbol?,
    override var overriddenSymbolsField: List<IrSimpleFunctionSymbol>
) : FunctionCarrier {

    override var dispatchReceiverParameterField: IrValueParameter?
        get() = dispatchReceiverParameterSymbolField?.owner
        set(v) {
            dispatchReceiverParameterSymbolField = v?.symbol
        }

    override var extensionReceiverParameterField: IrValueParameter?
        get() = extensionReceiverParameterSymbolField?.owner
        set(v) {
            extensionReceiverParameterSymbolField = v?.symbol
        }

    override var typeParametersField: List<IrTypeParameter> = typeParametersSymbolField.map { it.owner }

    override var valueParametersField: List<IrValueParameter> = valueParametersSymbolField.map { it.owner }
}
